#
#       Create an invoice from Resp Inscr to Resp Inscr.
#
- Create a simple invoice type A
- !record {model: account.invoice, id: inv_ri2ri}:
    company_id: com_ivari
    partner_id: par_ivari2
    journal_id: !ref {model: account.journal, search: "[('code','=','FVA0001'), ('company_id.name','=','Coop. Trab. Moldeo Interactive Ltda.')]"}
    period_id:  !ref {model: account.period, search: "[('company_id.name','=','Coop. Trab. Moldeo Interactive Ltda.')]"}
    account_id: !ref {model: account.account, search: "[('code','=','113010'), ('company_id.name','=','Coop. Trab. Moldeo Interactive Ltda.')]"}
    invoice_line:
      - account_id: !ref {model: account.account, search: "[('code','=','411000'), ('company_id.name','=','Coop. Trab. Moldeo Interactive Ltda.')]"}
        name: '[PC3] Medium PC'
        price_unit: 900.0
        quantity: 10.0
        product_id: prod_iva21
        uos_id: product.product_uom_unit
        invoice_line_tax_id: !ref {model: account.tax, search: "[('name','=','01003005:V'),('company_id.name','=','Coop. Trab. Moldeo Interactive Ltda.')]"}

- Compute amount
- !python {model: account.invoice}: |
    inv_id = [ref('inv_ri2ri')]
    self.view_init(cr, uid, inv_id, {})
    self.button_reset_taxes(cr, uid, inv_id)

- Check invoice state and values
- !assert {model: account.invoice, id: inv_ri2ri, string: Check invoice state and values}:
    - state == 'draft'
    - amount_untaxed == 9000.0
    - amount_tax == 1890.0
    - amount_total == 10890.0
    - currency_id.id == ref('base.ARS')

- Check invoice lines
- !assert {model: account.invoice.line, search: "[('invoice_id','=',ref('inv_ri2ri'))]", string: Check invoice lines}:
    - name == '[PC3] Medium PC'
    - price_unit_vat_included == 1089.0
    - price_subtotal_vat_included == 10890.0
    - price_unit_not_vat_included == 900.0
    - price_subtotal_not_vat_included == 9000.0

- Validate invoice
- !python {model: account.invoice}: |
    inv_id = [ref('inv_ri2ri')]
    self.action_date_assign(cr, uid, inv_id)
    self.action_move_create(cr, uid, inv_id)
    self.action_number(cr, uid, inv_id)
    self.write(cr, uid, inv_id, {'state': 'open'})

- Check invoice state and values
- !assert {model: account.invoice, id: inv_ri2ri, string: Check invoice state and values}:
    - state == 'open'
    - amount_untaxed == 9000.0
    - amount_tax == 1890.0
    - amount_total == 10890.0

- Prepare http controllers to prevent errors
- !python {model: account.invoice}: |
    import urllib
    import time
    urllib.urlopen('http://localhost:8069/')
    time.sleep(3)

- Print invoice
- !python {model: account.invoice}: |
    import os
    import openerp.report
    from openerp import tools
    data, format = openerp.report.render_report(cr, uid, [ref('inv_ri2ri')], 'account.report_invoice', {}, {})
    if tools.config['test_report_directory']:
       file(os.path.join(tools.config['test_report_directory'], 'account-invoice.ri2ri.'+format), 'wb+').write(data)

